package routers

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/swagger"
	"github.com/gulizay91/template-go-api/config"
	"github.com/gulizay91/template-go-api/internal/handlers"
	"github.com/streadway/amqp"
	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/gulizay91/template-go-api/docs"
)

type Router struct {
	templateHandler *handlers.TemplateHandler
	appRouter       *fiber.App
}

func NewRouter(appRouter *fiber.App, config *config.Config, amqpConn *amqp.Connection, amqpChannel *amqp.Channel) *Router {
	templateHandler := handlers.NewTemplateHandler(config, amqpConn, amqpChannel)
	return &Router{
		appRouter:       appRouter,
		templateHandler: templateHandler,
	}
}

func (router *Router) AddRouter() {
	// Middleware
	router.appRouter.Use(recover.New())
	router.appRouter.Use(cors.New())

	// Routes
	router.appRouter.Get("/swagger/*", swagger.HandlerDefault)
	router.appRouter.Get("/health", HealthCheck)
	router.appRouter.Get("/ready", ReadyCheck)

	// Create routes group.
	route := router.appRouter.Group("/api/v1")

	route.Get("/template", router.templateHandler.GetTemplate)
	route.Post("/template/message", router.templateHandler.SendTemplateMessage)
}

// HealthCheck godoc
// @Summary Show the status of server.
// @Description get the status of server.
// @Tags root
// @Accept */*
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /health [get]
func HealthCheck(c *fiber.Ctx) error {
	res := map[string]interface{}{
		"status": "✅ Server is up and running!",
	}

	if err := c.JSON(res); err != nil {
		return err
	}

	return nil
}

// ReadyCheck godoc
// @Summary Show the status of server.
// @Description get the status of server.
// @Tags root
// @Accept */*
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /ready [get]
func ReadyCheck(c *fiber.Ctx) error {
	res := map[string]interface{}{
		"status": "✅ Server is ready!",
	}

	if err := c.JSON(res); err != nil {
		return err
	}

	return nil
}
